This is an instruction of how to generate test instances and data format of
these instances.

All data are generated by R scripts.

- generateAll.R
	- generateProblemConfig.R
	- generatePM.R
	- generateVM.R
	- generateTestCases.R

- generateAll.R calls all sub-functions to generate test instances.
				It creates all directories of test instances.

=================================================

- generatePM.R generates PMConfig.csv

We simulated HP ProLiant DL380 G7 servers with Intel Xeon E5640 quad-core
CPU and 16 GB memory.


- PMConfig.csv file has 4 Rows.

Row 1: CPU capacity: 3.3 GHz * 4 cores = 13200 MHz
Row 2: Ram capacity: 16 GB = 16000 MB
Row 3: full load energy consumption: 540 W

=================================================

- generateVM.R generates VMConfig.csv

-> generateVM.R is used to generate VMConfig.csv
We simulated 5 types of VMs according to real world VM configuration from AWS.

VM types	CPU    	Mem
t2.nano: 	3300 MHz	500 MB
t2.micro 	3300 MHz	1000 MB
t2.medium 	6600 MHz 	4000 MB
t2.large	6600 MHz 	8000 GB
t2.2xlarge	12000 MHz	15000 GB

=================================================

- generateTestCases.R generates container requirements file taskCpu.csv and
  taskMem.csv

- taskCpu.csv and taskMem.csv
	We generate requirements of CPU with real world dataset WS-Dream combined
with synthetic data from exponential distribution. 
	
For each test case, we first randomly select a throughput from WS-Dream
application throughput dataset. Then, we randomly generate a CPU requirements
for a single task of the application. Then, the CPU requirement is calculated
by multiply CPU requirement and throughput. The same rules apply for
taskMem.csv. 

We define the coefficient in exponential distribution as 0.001.

=================================================

- generateOS.R generates container OS requirements file taskOS.csv

- taskOS.csv
	Each number represents a type of OS for a container.
	We generate OS requirements according to a survey of OS in cloud data
center.
	We choose the top three OS types. Their market percentage is roughly 0.5, 0.3 and
0.2.

=================================================

Experiment Design

Currently, we design 6 datasets with increasing number of applications to be
deployed.

The instances are similar with our CEC paper.
The difference is that this time, we use the real world data.

Test instances:

number of applications: 20, 40, 60, 80, 100, 200

- ProblemConfig.csv
	Row 1: The number of VMs.
	Row 2: The number of applications/containers.
